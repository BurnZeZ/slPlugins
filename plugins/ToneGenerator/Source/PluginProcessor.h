/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#pragma once

#include "../JuceLibraryCode/JuceHeader.h"

using namespace juce::dsp;


#define PARAM_ENABLE        "enable"
#define PARAM_BANDLIMIT     "bandlimit"
#define PARAM_FREQ          "freq"
#define PARAM_SINE_LEVEL    "sine"
#define PARAM_TRI_LEVEL     "triangle"
#define PARAM_SAW_UP_LEVEL  "sawup"
#define PARAM_SAW_DN_LEVEL  "sawdn"
#define PARAM_SQUARE_LEVEL  "square"
#define PARAM_NOISE_LEVEL   "noise"

class slToneAudioProcessorEditor;
//==============================================================================
/**
*/
class slToneAudioProcessor : public gin::GinProcessor
{
public:
    //==============================================================================
    slToneAudioProcessor();
    ~slToneAudioProcessor() override;

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    gin::AudioFifo fifo {1, 44100};

private:
    bool bandLimited = true;
    
    Oscillator<float> sine;
    Oscillator<float> triangle;
    Oscillator<float> sawUp;
    Oscillator<float> sawDown;
    Oscillator<float> square;
    Oscillator<float> noise;
    
    Component::SafePointer<slToneAudioProcessorEditor> editor;

    LinearSmoothedValue<float> enableVal;
    LinearSmoothedValue<float> sineVal;
    LinearSmoothedValue<float> triangleVal;
    LinearSmoothedValue<float> sawUpVal;
    LinearSmoothedValue<float> sawDownVal;
    LinearSmoothedValue<float> squareVal;
    LinearSmoothedValue<float> noiseVal;
            
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (slToneAudioProcessor)
};
