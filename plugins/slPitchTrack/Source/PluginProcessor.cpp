/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

//==============================================================================
slPitchTrackAudioProcessor::slPitchTrackAudioProcessor()
{
}

slPitchTrackAudioProcessor::~slPitchTrackAudioProcessor()
{
}

//==============================================================================
void slPitchTrackAudioProcessor::prepareToPlay (double sampleRate_, int samplesPerBlock)
{
    sampleRate = sampleRate_;
    
    scratch.setSize (1, samplesPerBlock);
    
    workSize = dywapitch_neededsamplecount (130 * sampleRate / 44100.0);
    audioHistory.setSize (1, workSize + 1);
    work.setSize (1, workSize);
    
    dywapitch_inittracking (&trackInfo);
}

void slPitchTrackAudioProcessor::releaseResources()
{
}

void slPitchTrackAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer&)
{
    int numSamples = buffer.getNumSamples();
    scratch.setSize (1, numSamples, false, false, true);
    
    scratch.copyFrom (0, 0, buffer, 0, 0, buffer.getNumSamples());
    if (getMainBusNumInputChannels() == 2)
    {
        scratch.addFrom (0, 0, buffer, 1, 0, buffer.getNumSamples());
        scratch.applyGain (0.5f);
    }
    
    audioHistory.write (scratch);
    audioHistory.read (work);
    
    const float* src = work.getReadPointer (0);
    double dst[workSize];
    
    for (int i = 0; i < work.getNumSamples(); i++)
        dst[i] = src[i];
    
    pitch = dywapitch_computepitch (&trackInfo, dst, 0, work.getNumSamples()) * 44100 / sampleRate;
    
    outputLevel.trackBuffer (work);
}

//==============================================================================
bool slPitchTrackAudioProcessor::hasEditor() const
{
    return true;
}

AudioProcessorEditor* slPitchTrackAudioProcessor::createEditor()
{
    return new slPitchTrackAudioProcessorEditor (*this);
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new slPitchTrackAudioProcessor();
}