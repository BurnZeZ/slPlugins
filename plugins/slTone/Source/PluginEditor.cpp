/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

//==============================================================================
slToneAudioProcessorEditor::slToneAudioProcessorEditor (slToneAudioProcessor& p)
    : slAudioProcessorEditor (p), processor (p)
{
    addAndMakeVisible (&scope);
    
    for (slParameter* pp : p.getPluginParameters())
    {
        ParamComponent* pc;
        
        if (pp->isOnOff())
            pc = new Switch (pp);
        else
            pc = new Knob (pp);
        
        addAndMakeVisible (pc);
        controls.add (pc);
    }
    
    setGridSize (7, 2);
    
    scope.setNumSamplesPerPixel (2);
    scope.setVerticalZoomFactor (1.0f);
}

slToneAudioProcessorEditor::~slToneAudioProcessorEditor()
{
}

//==============================================================================
void slToneAudioProcessorEditor::resized()
{
    slAudioProcessorEditor::resized();

    componentForId (PARAM_ENABLE)->setBounds (getGridArea (0, 0));
    componentForId (PARAM_FREQ)->setBounds (getGridArea (0, 1));
    
    scope.setBounds (getGridArea (1, 0, 3, 2));
    
    componentForId (PARAM_SINE_LEVEL)->setBounds (getGridArea (4, 0));
    componentForId (PARAM_TRI_LEVEL)->setBounds (getGridArea (4, 1));
    componentForId (PARAM_SAW_UP_LEVEL)->setBounds (getGridArea (5, 0));
    componentForId (PARAM_SAW_DN_LEVEL)->setBounds (getGridArea (5, 1));
    componentForId (PARAM_SQUARE_LEVEL)->setBounds (getGridArea (6, 0));
    componentForId (PARAM_NOISE_LEVEL)->setBounds (getGridArea (6, 1));
}
