/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include <random>

using namespace gin;

//==============================================================================
String onOffTextFunction (const Parameter&, float v)
{
    return v > 0.0f ? "On" : "Off";
}

//==============================================================================
PluginProcessor::PluginProcessor()
{
    addPluginParameter (new Parameter (PARAM_GAIN_L,   "Left",         "", "dB", -100.0f,     100.0f, 0.0f, 0.0f, 5.f));
    addPluginParameter (new Parameter (PARAM_GAIN_S,   "Both",         "", "dB", -100.0f,     100.0f, 0.0f, 0.0f, 5.f));
    addPluginParameter (new Parameter (PARAM_GAIN_R,   "Right",        "", "dB", -100.0f,     100.0f, 0.0f, 0.0f, 5.f));
    addPluginParameter (new Parameter (PARAM_CLIP,     "Clip",         "", "",      0.0f,       1.0f, 1.0f, 1.0f, 1.f, onOffTextFunction));
}

PluginProcessor::~PluginProcessor()
{
}

//==============================================================================
void PluginProcessor::prepareToPlay (double sampleRate, int)
{
    lVal.reset (sampleRate, 0.05);
    rVal.reset (sampleRate, 0.05);
    sVal.reset (sampleRate, 0.05);
}

void PluginProcessor::releaseResources()
{
}

void PluginProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer&)
{
    lVal.setTargetValue (Decibels::decibelsToGain (getParameter (PARAM_GAIN_L)->getUserValue()));
    rVal.setTargetValue (Decibels::decibelsToGain (getParameter (PARAM_GAIN_R)->getUserValue()));
    sVal.setTargetValue (Decibels::decibelsToGain (getParameter (PARAM_GAIN_S)->getUserValue()));
    
    applyGain (buffer, 0, lVal);
    applyGain (buffer, 1, rVal);
    
    applyGain (buffer, sVal);
    
    if (getParameter (PARAM_CLIP)->getUserValue() != 0.0f)
        clip (buffer, -1.0f, 1.0f);
}

//==============================================================================
bool PluginProcessor::hasEditor() const
{
    return true;
}

AudioProcessorEditor* PluginProcessor::createEditor()
{
    return new PluginEditor (*this);
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new PluginProcessor();
}
