/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

using namespace gin;

//==============================================================================
MathsAudioProcessorEditor::MathsAudioProcessorEditor (MathsAudioProcessor& p)
    : GinAudioProcessorEditor (p, 100, 25), processor (p)
{
    addAndMakeVisible (l);
    addAndMakeVisible (r);
    
    l.addListener (this);
    r.addListener (this);
    
    l.setText (p.lEquation, dontSendNotification);
    r.setText (p.rEquation, dontSendNotification);

    setGridSize (4, 2);
}

MathsAudioProcessorEditor::~MathsAudioProcessorEditor()
{
}

//==============================================================================
void MathsAudioProcessorEditor::resized()
{
    GinAudioProcessorEditor::resized();

    l.setBounds (getGridArea (0, 0, 4, 1).reduced (4, 4));
    r.setBounds (getGridArea (0, 1, 4, 1).reduced (4, 4));
}

void MathsAudioProcessorEditor::textEditorReturnKeyPressed (TextEditor& ed)
{
    if (&ed == &l)
    {
        processor.lEquation = ed.getText();
        processor.refreshEquations = true;
    }
    else if (&ed == &r)
    {
        processor.rEquation = ed.getText();
        processor.refreshEquations = true;
    }
}

void MathsAudioProcessorEditor::textEditorEscapeKeyPressed (TextEditor& ed)
{
    if (&ed == &l)
        l.setText (processor.lEquation, dontSendNotification);
    else if (&ed == &r)
        r.setText (processor.rEquation, dontSendNotification);
}

void MathsAudioProcessorEditor::textEditorFocusLost (TextEditor& ed)
{
    textEditorReturnKeyPressed (ed);
}

