/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#pragma once

#include "../JuceLibraryCode/JuceHeader.h"

#include "Pad.h"

using namespace juce::dsp;

class SFXAudioProcessorEditor;
//==============================================================================
class SFXAudioProcessor : public gin::GinProcessor,
                          private MPESynthesiser
{
public:
    //==============================================================================
    SFXAudioProcessor();
    ~SFXAudioProcessor() override;

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    void stateUpdated() override;
    void updateState() override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;
    
    Pad* getPadForNote (int note)
    {
        for (auto p : pads)
            if (p->note == note)
                return p;
        
        return nullptr;
    }

    Pad* getPad (int idx)               { return pads[idx]; }
    const OwnedArray<Pad>& getPads()    { return pads;      }
    
    String uniqueName (String prefix);

    bool getMidiLearn()                 { return midiLearn; }
    void setMidiLearn (bool m)          { midiLearn = m;    }
    void setCurrentPad (int c)          { currentPad = c;   }
    int getCurrentPad()                 { return currentPad;}
    
    //==============================================================================
    void midiNoteOn (int note, int velocity = 128);
    void midiNoteOff (int note, int velocity = 0);

    bool isMidiNoteDown (int n)         { return (n >= 0 && n <= 127) ? (midiOn[n] || midiCnt[n]) : false; }

    int midiOn[128] = {0}, midiCnt[128] = {0};

    std::function<void ()> onCurrentPageChanged;

private:
    void trackMidi (MidiBuffer& midi, int numSamples);
    //==============================================================================
    
    CriticalSection lock;    
    Component::SafePointer<SFXAudioProcessorEditor> editor;
    
    OwnedArray<Pad> pads;

    MidiBuffer userMidi;
    bool midiLearn = false;
    int currentPad = 0;

    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (SFXAudioProcessor)
};
