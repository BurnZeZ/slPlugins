/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "BinaryData.h"

using namespace gin;

//==============================================================================
SFXAudioProcessorEditor::SFXAudioProcessorEditor (SFXAudioProcessor& p)
    : GinAudioProcessorEditor (p), processor (p)
{
    additionalProgramming = "Thomas Vian";

    logo = ImageFileFormat::loadFrom (BinaryData::logo_png, BinaryData::logo_pngSize);

    addAndMakeVisible (padGrid);
    addAndMakeVisible (params);

    setGridSize (10, 4);

    auto& padComponents = padGrid.getPads();
    for (int i = 0; i < padComponents.size(); i++)
    {
        auto pc = padComponents[i];

        pc->onDown = [this, i] ()
        {
            processor.midiNoteOn (processor.getPads()[i]->note);
            params.setPage (i);
        };

        pc->onUp = [this, i] ()
        {
            processor.midiNoteOff (processor.getPads()[i]->note);
        };
    }
}

SFXAudioProcessorEditor::~SFXAudioProcessorEditor()
{
}

//==============================================================================
void SFXAudioProcessorEditor::refresh()
{
}

void SFXAudioProcessorEditor::resized()
{
    GinAudioProcessorEditor::resized();

    auto rc = getFullGridArea();

    padGrid.setBounds (rc.removeFromLeft (rc.getHeight()));
    params.setBounds (rc);
}

void SFXAudioProcessorEditor::paint (Graphics& g)
{
    GinAudioProcessorEditor::paint (g);

    g.drawImageAt (logo, getWidth() / 2 - logo.getWidth() / 2, 0);
}
