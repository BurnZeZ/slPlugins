/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include <random>

using namespace gin;

//==============================================================================
FormulaAudioProcessor::FormulaAudioProcessor()
{
    formulaSynth.setMPE (false);
}

FormulaAudioProcessor::~FormulaAudioProcessor()
{
}

//==============================================================================
void FormulaAudioProcessor::prepareToPlay (double sampleRate, int /*samplesPerBlock*/)
{
    formulaSynth.setCurrentPlaybackSampleRate (sampleRate);
}

void FormulaAudioProcessor::releaseResources()
{
}

void FormulaAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midi)
{
    const int numSamples = buffer.getNumSamples();

    formulaSynth.renderNextBlock (buffer, midi, 0, numSamples);
    
    if (editor)
    {
        AudioSampleBuffer outputBuffer (buffer.getArrayOfWritePointers(), 2, numSamples);        
        editor->scope.addSamples (outputBuffer);
    }
}

//==============================================================================
bool FormulaAudioProcessor::hasEditor() const
{
    return true;
}

AudioProcessorEditor* FormulaAudioProcessor::createEditor()
{
    editor = new FormulaAudioProcessorEditor (*this);
    return editor;
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new FormulaAudioProcessor();
}
