/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

//==============================================================================
slPitchTrackAudioProcessor::slPitchTrackAudioProcessor()
{
    sp_create (&sp);
    sp_pitchamdf_create (&pitchamdf);
    sp_pitchamdf_init (sp, pitchamdf, 100, 4000);
}

slPitchTrackAudioProcessor::~slPitchTrackAudioProcessor()
{
    sp_pitchamdf_destroy (&pitchamdf);
    sp_destroy (&sp);
}

//==============================================================================
void slPitchTrackAudioProcessor::prepareToPlay (double sampleRate_, int samplesPerBlock)
{
    sampleRate = sampleRate_;
    
    scratch.setSize (1, samplesPerBlock);
}

void slPitchTrackAudioProcessor::releaseResources()
{
}

void slPitchTrackAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer&)
{
    int numSamples = buffer.getNumSamples();
    scratch.setSize (1, numSamples, false, false, true);
    
    scratch.copyFrom (0, 0, buffer, 0, 0, buffer.getNumSamples());
    if (getMainBusNumInputChannels() == 2)
    {
        scratch.addFrom (0, 0, buffer, 1, 0, buffer.getNumSamples());
        scratch.applyGain (0.5f);
    }
    
    float in = 0;
    float out = 0;
    float rms = 0;
    for (int i = 0; i < scratch.getNumSamples(); i++)
    {
        in = *(scratch.getReadPointer (0) + i);
        if (sp_pitchamdf_compute(sp, pitchamdf, &in, &out, &rms) == SP_OK)
            pitch = out;
    }
    
    outputLevel.trackBuffer (scratch);
}

//==============================================================================
bool slPitchTrackAudioProcessor::hasEditor() const
{
    return true;
}

AudioProcessorEditor* slPitchTrackAudioProcessor::createEditor()
{
    return new slPitchTrackAudioProcessorEditor (*this);
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new slPitchTrackAudioProcessor();
}